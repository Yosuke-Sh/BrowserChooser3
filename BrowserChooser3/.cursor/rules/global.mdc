# BrowserChooser3 開発ルール

あなたは高度な問題解決能力を持つAIアシスタントです。以下のルールに従って、効率的かつ正確にタスクを遂行してください。

## プロジェクト概要

### 技術スタック
- **フレームワーク**: .NET 8.0 Windows Forms
- **言語**: C#
- **テストフレームワーク**: xUnit + FluentAssertions
- **ログ**: カスタムLoggerクラス
- **設定管理**: XMLシリアライゼーション
- **ブラウザ検出**: レジストリ操作

### プロジェクト構造
- **Forms/**: Windows Forms UI
- **Classes/**: ビジネスロジック
  - **Models/**: データモデル
  - **Services/**: サービス層
  - **Utilities/**: ユーティリティクラス
- **CustomControls/**: カスタムコントロール
- **Tests/**: 単体テスト

## 開発プロセス

### 1. 指示の分析と計画
<タスク分析>
- 主要なタスクを簡潔に要約してください
- 技術スタックの制約内での実装方法を検討してください
- 重要な要件と制約を特定してください
- 潜在的な課題をリストアップしてください
- タスク実行のための具体的なステップを詳細に列挙してください
- それらのステップの最適な実行順序を決定してください

#### 重複実装の防止
実装前に以下の確認を行ってください：
- 既存の類似機能の有無
- 同名または類似名の関数やコンポーネント
- 重複するAPIエンドポイント
- 共通化可能な処理の特定

#### プロジェクト固有の確認事項
- 既存のSettingsクラスとの整合性
- Loggerクラスを使用したログ出力の実装
- テストクラスの存在とカバレッジ
- 設定ファイルの互換性

このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
</タスク分析>

### 2. タスクの実行
- 特定したステップを一つずつ実行してください
- 各ステップの完了後、簡潔に進捗を報告してください
- 実装時は以下の点に注意してください：
  - 適切なディレクトリ構造の遵守
  - 命名規則の一貫性維持
  - 共通処理の適切な配置
  - Loggerクラスを使用したログ出力
  - 対応するテストの作成

### 3. 品質管理と問題対応
- 各タスクの実行結果を迅速に検証してください
- エラーや不整合が発生した場合は、以下のプロセスで対応してください：
  a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
  b. 対策案の作成と実施
  c. 修正後の動作検証
  d. デバッグログの確認と分析

- 検証結果は以下の形式で記録してください：
  a. 検証項目と期待される結果
  b. 実際の結果と差異
  c. 必要な対応策（該当する場合）

- **テストガバレッジ計測時は必ずレポートを生成してください**:
  ```bash
  # カバレッジ計測とレポート生成の手順
  dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings
  reportgenerator -reports:"BrowserChooser3.Tests\TestResults\*\coverage.cobertura.xml" -targetdir:"coverage-report" -reporttypes:Html
  ```
- レポート生成後は `coverage-report/index.html` を確認してカバレッジ状況を把握してください

### 4. Git Commit
- **コミットタイミング**: すべての修正が完了してから一度にコミットする
- **コミットメッセージ**: 日本語で詳細な説明を記載する
- **コミット内容**: 関連する変更を論理的にグループ化する
- **コミット前確認**: 
  a. ビルドエラーがないことを確認
  b. テストが正常に実行されることを確認
  c. 警告が解消されていることを確認
  d. コードレビューを実施（該当する場合）

- **コミットメッセージの形式**:
```
機能名: 変更内容の要約

- 詳細な変更内容1
- 詳細な変更内容2
- 修正対象ファイル:
  - ファイル名1
  - ファイル名2

関連する課題や注意点があれば記載
```

### 5. 最終確認
- すべてのタスクが完了したら、成果物全体を評価してください
- 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください
- 実装した機能に重複がないことを最終確認してください
- テストカバレッジの確認と不足テストの特定をしてください
- **テストガバレッジ計測時は必ずreportgeneratorでレポートを作成してください**:
  ```bash
  # カバレッジ計測とレポート生成の手順
  dotnet test --collect:"XPlat Code Coverage" --settings coverlet.runsettings
  reportgenerator -reports:"BrowserChooser3.Tests\TestResults\*\coverage.cobertura.xml" -targetdir:"coverage-report" -reporttypes:Html
  ```
- レポート生成後は `coverage-report/index.html` を確認してカバレッジ状況を把握してください

### 6. 結果報告
以下のフォーマットで最終的な結果を報告してください：
```markdown
# 実行結果報告

## 概要
[全体の要約を簡潔に記述]

## 実行ステップ
1. [ステップ1の説明と結果]
2. [ステップ2の説明と結果]
...

## 最終成果物
[成果物の詳細や、該当する場合はリンクなど]

## テスト状況
- 追加したテストの概要
- カバレッジの変化（該当する場合）

## 課題対応（該当する場合）
- 発生した問題と対応内容
- 今後の注意点

## 注意点・改善提案
- [気づいた点や改善提案があれば記述]
```

## コーディング規約

### 命名規則
- **PascalCase**: クラス、メソッド、プロパティ
- **camelCase**: 変数、パラメータ
- **テスト命名**: `[MethodName]_[Condition]_[ExpectedResult]`

### ログ出力
- Logger.LogDebug/LogInfo/LogWarning/LogErrorを使用
- 適切なログレベルを選択
- エラー時は例外情報も含める

### 例外処理
- try-catch文で適切なログ出力とエラーハンドリング
- 例外を隠蔽せず、適切に処理または再スロー

### 設定管理
- Settings.Currentを使用
- XML形式の設定ファイル構造を維持
- 後方互換性を維持

## 型安全性とエラーハンドリング

### 型エラーの根本原因を理解する
- エラーの表面的な修正ではなく、なぜそのエラーが発生するのかを理解してから対応する
- 型システムの制約を理解し、適切な解決策を選択する

### 安易な型回避を禁止する
- `!`演算子、`as`キャスト、`is`パターンマッチングの安易な使用を避ける
- 適切なnullチェック、型チェック、境界値チェックを実装する

### 警告への対応
- コンパイル警告も含めてすべての警告に対応する
- 安易な回避策でなく根本対策を実施する

## 重要な制約事項

### 変更禁止事項
- **UI変更**: レイアウト、色、フォントの変更は禁止（承認必須）
- **技術スタック変更**: バージョン（APIやフレームワーク、ライブラリ等）の勝手な変更は禁止
- **後方互換性**: 既存の設定ファイルとの互換性を維持

### 維持すべき機能
- **ブラウザ検出**: レジストリ操作による自動検出機能を維持
- **設定ファイル**: XML形式の設定ファイル構造を維持
- **ログレベル**: Debug/Info/Warning/Errorの適切な使い分け
- **ヘルプページURL**: 正しいGitHubリポジトリ（https://github.com/Yosuke-Sh/BrowserChooser3）を使用

## テスト要件

### カバレッジ目標
- **目標**: 90%以上
- **現在**: 48.1%（改善が必要）

### テスト種別
- **単体テスト**: 各機能の個別テスト
- **統合テスト**: 複数機能の連携テスト

### テスト環境での制約
- **プロセス起動防止**: テスト環境では実際のプロセス（ブラウザ起動など）を起動しない
- **並列実行時の競合回避**: 静的プロパティを使用するテストは並列実行時の競合に注意
- **ファイルアクセス競合回避**: テスト間で同じファイルにアクセスする場合は一時ファイルを使用

### モック使用
- 外部依存（ファイル、レジストリ）のモック化
- テスト可能な設計への変更

## 重要な注意事項

### 確認・承認
- 不明点がある場合は、作業開始前に必ず確認を取ってください
- 重要な判断が必要な場合は、その都度報告し、承認を得てください
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください

### 変更制限
- **明示的に指示されていない変更は行わないでください**
- 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください
- **特に UI/UXデザインの変更（レイアウト、色、フォント、間隔など）は禁止**

### 品質保証
- ビルドエラーがないことを確認
- テストが正常に実行されることを確認
- 警告が解消されていることを確認
- コードレビューを実施（該当する場合）

---

# 技術スタック詳細

@technologystack.md

---

# ディレクトリ構成詳細

@directorystructure.md

---

以上の指示に従い、確実で質の高い実装を行います。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。
