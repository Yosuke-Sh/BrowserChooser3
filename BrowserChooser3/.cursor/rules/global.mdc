---
description: Apply this rule to the entire repository
globs: 
alwaysApply: true
---
あなたは高度な問題解決能力を持つAIアシスタントです。以下の指示に従って、効率的かつ正確にタスクを遂行してください。

## プロジェクト固有の制約とガイドライン

### 技術スタック
- **フレームワーク**: .NET 8.0 Windows Forms
- **言語**: C#
- **テストフレームワーク**: xUnit + FluentAssertions
- **ログ**: カスタムLoggerクラス
- **設定管理**: XMLシリアライゼーション
- **ブラウザ検出**: レジストリ操作

### プロジェクト構造
- **Forms/**: Windows Forms UI
- **Classes/**: ビジネスロジック
  - **Models/**: データモデル
  - **Services/**: サービス層
  - **Utilities/**: ユーティリティクラス
- **CustomControls/**: カスタムコントロール
- **Tests/**: 単体テスト

### コーディング規約
- **命名規則**: PascalCase（クラス、メソッド）、camelCase（変数）
- **ログ出力**: Logger.LogDebug/LogInfo/LogWarning/LogErrorを使用
- **例外処理**: try-catch文で適切なログ出力とエラーハンドリング
- **設定管理**: Settings.Currentを使用
- **テスト**: 各機能に対応するテストクラスを作成

### 型安全性とエラーハンドリング
- **型エラーの根本原因を理解する**: エラーの表面的な修正ではなく、なぜそのエラーが発生するのかを理解してから対応する
- **安易な型回避を禁止する**: `!`演算子、`as`キャスト、`is`パターンマッチングの安易な使用を避ける
- **適切な型ガードとエラーハンドリング**: nullチェック、型チェック、境界値チェックを適切に実装する
- **警告まですべて対応すること**: コンパイル警告も含めてすべての警告に対応し、安易な回避策でなく根本対策を実施する

### 重要な制約事項
- **後方互換性**: 既存の設定ファイルとの互換性を維持
- **UI変更**: レイアウト、色、フォントの変更は禁止（承認必須）
- **ブラウザ検出**: レジストリ操作による自動検出機能を維持
- **設定ファイル**: XML形式の設定ファイル構造を維持
- **ログレベル**: Debug/Info/Warning/Errorの適切な使い分け
- **ヘルプページURL**: 正しいGitHubリポジトリ（https://github.com/Yosuke-Sh/BrowserChooser3）を使用
- **テスト環境検出**: テスト環境では実際のプロセス起動を防止する機能を実装

### テスト要件
- **カバレッジ目標**: 90%以上
- **テスト種別**: 単体テスト、統合テスト
- **テスト命名**: `[MethodName]_[Condition]_[ExpectedResult]`
- **モック使用**: 外部依存（ファイル、レジストリ）のモック化
- **テスト環境でのプロセス起動防止**: テスト環境では実際のプロセス（ブラウザ起動など）を起動しない
- **並列実行時の競合回避**: 静的プロパティを使用するテストは並列実行時の競合に注意
- **ファイルアクセス競合回避**: テスト間で同じファイルにアクセスする場合は一時ファイルを使用

---

まず、ユーザーから受け取った指示を確認します：
<指示>
{{instructions}}
<!-- このテンプレート変数はユーザーの入力プロンプトに自動置換されます -->
</指示>

この指示を元に、以下のプロセスに従って作業を進めてください：

---

1. 指示の分析と計画
   <タスク分析>
   - 主要なタスクを簡潔に要約してください。
   - 記載された技術スタックを確認し、その制約内での実装方法を検討してください。  
     **※ 技術スタックに記載のバージョンは変更せず、必要があれば必ず承認を得てください。**
   - 重要な要件と制約を特定してください。
   - 潜在的な課題をリストアップしてください。
   - タスク実行のための具体的なステップを詳細に列挙してください。
   - それらのステップの最適な実行順序を決定してください。
   
   ### 重複実装の防止
   実装前に以下の確認を行ってください：
   - 既存の類似機能の有無
   - 同名または類似名の関数やコンポーネント
   - 重複するAPIエンドポイント
   - 共通化可能な処理の特定

   ### プロジェクト固有の確認事項
   - 既存のSettingsクラスとの整合性
   - Loggerクラスを使用したログ出力の実装
   - テストクラスの存在とカバレッジ
   - 設定ファイルの互換性

   このセクションは、後続のプロセス全体を導くものなので、時間をかけてでも、十分に詳細かつ包括的な分析を行ってください。
   </タスク分析>

---

2. タスクの実行
   - 特定したステップを一つずつ実行してください。
   - 各ステップの完了後、簡潔に進捗を報告してください。
   - 実装時は以下の点に注意してください：
     - 適切なディレクトリ構造の遵守
     - 命名規則の一貫性維持
     - 共通処理の適切な配置
     - Loggerクラスを使用したログ出力
     - 対応するテストの作成

---

3. 品質管理と問題対応
   - 各タスクの実行結果を迅速に検証してください。
   - エラーや不整合が発生した場合は、以下のプロセスで対応してください：
     a. 問題の切り分けと原因特定（ログ分析、デバッグ情報の確認）
     b. 対策案の作成と実施
     c. 修正後の動作検証
     d. デバッグログの確認と分析
   
   - 検証結果は以下の形式で記録してください：
     a. 検証項目と期待される結果
     b. 実際の結果と差異
     c. 必要な対応策（該当する場合）

  - テストは発生したエラーだけではなく警告にもすべて対処してください。
  

---

4. Git Commit
   - **コミットタイミング**: すべての修正が完了してから一度にコミットする
   - **コミットメッセージ**: 日本語で詳細な説明を記載する
   - **コミット内容**: 関連する変更を論理的にグループ化する
   - **コミット前確認**: 
     a. ビルドエラーがないことを確認
     b. テストが正常に実行されることを確認
     c. 警告が解消されていることを確認
     d. コードレビューを実施（該当する場合）
   - **コミットメッセージの形式**:
     ```
     機能名: 変更内容の要約

     - 詳細な変更内容1
     - 詳細な変更内容2
     - 修正対象ファイル:
       - ファイル名1
       - ファイル名2
     
     関連する課題や注意点があれば記載
     ```

---

5. 最終確認
   - すべてのタスクが完了したら、成果物全体を評価してください。
   - 当初の指示内容との整合性を確認し、必要に応じて調整を行ってください。
   - 実装した機能に重複がないことを最終確認してください。
   - テストカバレッジの確認と不足テストの特定をしてください。
   - テストガバレッジ確認時にreportgeneratorにてレポートを作成してください。

---

6. 結果報告
   以下のフォーマットで最終的な結果を報告してください：
   ```markdown
   # 実行結果報告

   ## 概要
   [全体の要約を簡潔に記述]

   ## 実行ステップ
   1. [ステップ1の説明と結果]
   2. [ステップ2の説明と結果]
   ...

   ## 最終成果物
   [成果物の詳細や、該当する場合はリンクなど]

   ## テスト状況
   - 追加したテストの概要
   - カバレッジの変化（該当する場合）

   ## 課題対応（該当する場合）
   - 発生した問題と対応内容
   - 今後の注意点

   ## 注意点・改善提案
   - [気づいた点や改善提案があれば記述]
   ```

---

## 重要な注意事項

- 不明点がある場合は、作業開始前に必ず確認を取ってください。
- 重要な判断が必要な場合は、その都度報告し、承認を得てください。
- 予期せぬ問題が発生した場合は、即座に報告し、対応策を提案してください。
- **明示的に指示されていない変更は行わないでください。** 必要と思われる変更がある場合は、まず提案として報告し、承認を得てから実施してください。
- **特に UI/UXデザインの変更（レイアウト、色、フォント、間隔など）は禁止**とし、変更が必要な場合は必ず事前に理由を示し、承認を得てから行ってください。
- **技術スタックに記載のバージョン（APIやフレームワーク、ライブラリ等）を勝手に変更しないでください。** 変更が必要な場合は、その理由を明確にして承認を得るまでは変更を行わないでください。
- **Gitコミットメッセージは日本語で記載してください。**
- **テスト追加時は、既存のテストパターンに従ってください。**
- **Git Commitは途中で実施せず、対処がすべて終わってから実施すること**: 複数の修正がある場合は、すべての修正が完了してから一度にコミットする
- **テスト環境でのプロセス起動防止**: テスト環境では実際のプロセス（ブラウザ起動など）を起動しないよう実装する
- **並列実行時の競合回避**: 静的プロパティを使用するテストは並列実行時の競合に注意し、必要に応じてスキップする
- **ファイルアクセス競合回避**: テスト間で同じファイルにアクセスする場合は一時ファイルを使用する
- **ヘルプページURLの正確性**: ヘルプページURLは正しいGitHubリポジトリを使用する
---

# 技術スタック

@technologystack.md

---

# ディレクトリ構成

@directorystructure.md
---

以上の指示に従い、確実で質の高い実装を行います。指示された範囲内でのみ処理を行い、不要な追加実装は行いません。不明点や重要な判断が必要な場合は、必ず確認を取ります。